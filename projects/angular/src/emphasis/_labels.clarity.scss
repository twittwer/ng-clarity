/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:meta';
@use '../utils/mixins';
@use '../utils/variables/variables.global';
@use 'variables.badges' as badges-variables;
@use 'variables.label' as label-variables;

@mixin generateLabelStyles($color: gray, $alias: 1) {
  $cssVarBgColor: label-variables.getLabelCssVarName($color, bg-color);
  $cssVarTextColor: label-variables.getLabelCssVarName($color, color);
  $cssVarBorderColor: label-variables.getLabelCssVarName($color, border-color);

  &.label-#{'' + $color},
  &.label-#{$alias} {
    border-width: var(--clr-label-border-width);
    border-style: solid;
    border-color: var(--#{$cssVarBorderColor});
    background-color: var(--#{$cssVarBgColor});
  }

  &.clickable.label-#{'' + $color} {
    &:active {
      box-shadow: var(--clr-label-box-shadow);
    }
  }

  &.label-#{'' + $color} > .badge {
    background: var(--#{badges-variables.getBadgeColor($color, bg-color, 'css-var')});
    color: var(--#{badges-variables.getBadgeColor($color, color, 'css-var')});
  }
}

@mixin generateStatusLabelStyles($status: info) {
  &.label-#{$status} {
    background: var(--#{label-variables.getLabelCssVarName($status, bg-color)});
    color: var(--#{label-variables.getLabelCssVarName($status, color)});
    border-width: var(--clr-label-border-width);
    border-style: solid;
    border-color: var(--#{label-variables.getLabelCssVarName($status, border-color)});
  }
  &.label-#{'' + $status} > .badge {
    background: var(--#{badges-variables.getBadgeColor($status, bg-color, 'css-var')});
    color: var(--#{badges-variables.getBadgeColor($status, color, 'css-var')});
  }
}

@include meta.load-css('properties.label');

@include mixins.exports('labels.clarity') {
  //NOTE: Had to use inline-flex, reset line-height to normal, and had to use change a few values
  //instead of using our baselineRem function. This was done to achieve the desired look
  //and to align this with our vertical baseline. Not sure why but aligning inline-blocks within inline-blocks
  //is a bit tricky. I initially used display: inline-block but I wasn't able to align the labels properly.
  .label,
  a.label {
    //default
    $label-nudge-for-vertical-alignment: variables.$clr_baselineRem_1px;
    font-size: var(--clr-label-font-size);
    font-weight: var(--clr-label-font-weight);
    letter-spacing: var(--clr-label-letter-spacing);
    line-height: var(--clr-label-line-height);

    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: var(--clr-label-padding);
    gap: var(--clr-label-gap-size);
    border-radius: var(--clr-label-border-radius);
    border-width: var(--clr-label-border-width);
    border-style: solid;
    border-color: var(--clr-label-default-border-color);
    height: var(--clr-label-height);
    margin: 0 variables.$clr_baselineRem_0_25 $label-nudge-for-vertical-alignment 0;
    white-space: nowrap;
    color: var(--clr-label-font-color-light);

    &:visited {
      color: var(--clr-label-font-color-light);
    }

    &:focus,
    &:hover,
    &:active {
      text-decoration: none;
    }

    &.clickable {
      font-size: var(--clr-label-clickable-font-size);
      font-weight: var(--clr-label-clickable-font-weight);
      letter-spacing: var(--clr-label-clickable-letter-spacing);
      line-height: var(--clr-label-clickable-line-height);
    }

    &.clickable:not(.disabled) {
      &:hover {
        text-decoration: none;
        background: var(--clr-label-bg-hover-color);
        color: var(--clr-label-hover-color);
      }

      &:active {
        color: var(--clr-label-active-color);
        background: var(--clr-label-bg-active-color);
        box-shadow: var(--clr-label-box-shadow);
        transform: var(--clr-label-pressed-transform);
      }
    }

    @include generateLabelStyles(gray, 1);
    @include generateLabelStyles(purple, 2);
    @include generateLabelStyles(blue, 3);
    @include generateLabelStyles(orange, 4);
    @include generateLabelStyles(light-blue, 5);

    @include generateStatusLabelStyles(info);
    @include generateStatusLabelStyles(success);
    @include generateStatusLabelStyles(warning);
    @include generateStatusLabelStyles(danger);

    & > .badge {
      margin: 0 (-1 * variables.$clr_baselineRem_0_375) 0 variables.$clr_baselineRem_0_25;
      //-0.375 is -9px. 12px initial label padding plus a negative margin of 9
    }

    &.disabled,
    &:disabled {
      cursor: not-allowed;
      pointer-events: none;
      background: var(--clr-label-bg-disabled-color);
      color: var(--clr-label-disabled-color);
      border-color: var(--clr-label-disabled-border-color);
      .badge {
        background: var(--clr-label-disabled-color);
      }
    }
  }

  @include mixins.fixForFirefox() {
    .label,
    a.label {
      // properly aligns labels in firefox...
      vertical-align: bottom;
    }
  }
}
