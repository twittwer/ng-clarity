/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
@use 'sass:meta';
@use '../utils/mixins';
@use '../utils/variables/variables.global';
@use 'variables.badges' as badges-variables;
@use 'variables.label' as label-variables;

@mixin generateLabelStyles($color: gray, $alias: 1) {
  $sassVarBgColor: label-variables.getLabelColor($color, bg-color);
  $cssVarBgColor: label-variables.getLabelColor($color, bg-color, 'css-var');
  $sassVarTextColor: label-variables.getLabelColor($color, color);
  $cssVarTextColor: label-variables.getLabelColor($color, color, 'css-var');

  &.label-#{'' + $color},
  &.label-#{$alias} {
    border: label-variables.$clr-label-borderwidth solid;
    @include mixins.css-var(border-color, $cssVarBgColor, $sassVarBgColor, variables.$clr-use-custom-properties);
  }

  &.clickable.label-#{'' + $color} {
    &:hover,
    &:active {
      text-decoration: none;
      @include mixins.css-var(
        background,
        clr-label-bg-hover-color,
        label-variables.$clr-label-bg-hover-color,
        variables.$clr-use-custom-properties
      );
    }

    &:active {
      // OldEdge/IE
      box-shadow: 0 label-variables.$clr-label-borderwidth 0 0 $sassVarBgColor inset;
      box-shadow: 0 label-variables.$clr-label-borderwidth 0 0
        var(mixins.css-variablize-string($cssVarBgColor), $sassVarBgColor) inset;
      transform: translateY(0.5px);
    }
  }

  &.label-#{'' + $color} > .badge {
    @include mixins.css-var(
      background,
      badges-variables.getBadgeColor($color, bg-color, 'css-var'),
      badges-variables.getBadgeColor($color, bg-color),
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      color,
      badges-variables.getBadgeColor($color, color, 'css-var'),
      badges-variables.getBadgeColor($color, color),
      variables.$clr-use-custom-properties
    );
  }
}

@mixin generateStatusLabelStyles($status: info) {
  &.label-#{$status} {
    @include mixins.css-var(
      background,
      label-variables.getLabelColor($status, bg-color, 'css-var'),
      label-variables.getLabelColor($status, bg-color),
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      color,
      label-variables.getLabelColor($status, color, 'css-var'),
      label-variables.getLabelColor($status, color),
      variables.$clr-use-custom-properties
    );
    border: label-variables.$clr-label-borderwidth solid;
    @include mixins.css-var(
      border-color,
      label-variables.getLabelColor($status, border-color, 'css-var'),
      label-variables.getLabelColor($status, border-color),
      variables.$clr-use-custom-properties
    );
  }
}

@include meta.load-css('properties.label');

@include mixins.exports('labels.clarity') {
  //NOTE: Had to use inline-flex, reset line-height to normal, and had to use change a few values
  //instead of using our baselineRem function. This was done to achieve the desired look
  //and to align this with our vertical baseline. Not sure why but aligning inline-blocks within inline-blocks
  //is a bit tricky. I initially used display: inline-block but I wasn't able to align the labels properly.
  .label,
  a.label {
    //default
    $label-nudge-for-vertical-alignment: variables.$clr_baselineRem_1px;
    @include mixins.css-var(
      font-size,
      clr-label-font-size,
      label-variables.$clr-label-font-size,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      font-weight,
      clr-label-font-weight,
      label-variables.$clr-label-font-weight,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      letter-spacing,
      clr-label-letter-spacing,
      label-variables.$clr-label-letter-spacing,
      variables.$clr-use-custom-properties
    );

    // line-height needed to be adjusted to force center alignment
    line-height: label-variables.$clr-label-font-size + variables.$clr_baselineRem_1px;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: 0 label-variables.$clr-label-padding-left-right 0;
    @include mixins.css-var(
      border-radius,
      clr-label-border-radius,
      variables.$clr_baselineRem_0_5,
      variables.$clr-use-custom-properties
    );
    border: label-variables.$clr-label-borderwidth solid;
    @include mixins.css-var(
      border-color,
      clr-label-default-border-color,
      label-variables.$clr-label-default-border-color,
      variables.$clr-use-custom-properties
    );
    height: variables.$clr_baselineRem_0_875;
    margin: 0 variables.$clr_baselineRem_0_25 $label-nudge-for-vertical-alignment 0;
    white-space: nowrap;
    @include mixins.css-var(
      color,
      clr-label-font-color-light,
      label-variables.$clr-label-font-color-light,
      variables.$clr-use-custom-properties
    );

    &:visited {
      @include mixins.css-var(
        color,
        clr-label-font-color-light,
        label-variables.$clr-label-font-color-light,
        variables.$clr-use-custom-properties
      );
    }

    &:focus,
    &:hover,
    &:active {
      text-decoration: none;
    }

    &.clickable {
      &:hover,
      &:active {
        @include mixins.css-var(
          background,
          clr-label-bg-hover-color,
          label-variables.$clr-label-bg-hover-color,
          variables.$clr-use-custom-properties
        );
      }

      &:active {
        $mySassShadow: label-variables.getLabelColor(gray, bg-color);
        // OldEdge/IE
        box-shadow: 0 variables.$clr_baselineRem_1px 0 0 label-variables.getLabelColor(gray, bg-color) inset;
        box-shadow: 0 variables.$clr_baselineRem_1px 0 0
          var(mixins.css-variablize-string(label-variables.getLabelColor(gray, bg-color, 'css-var')), $mySassShadow)
          inset;
        transform: translateY(0.5px);
      }
    }

    @include generateLabelStyles(gray, 1);
    @include generateLabelStyles(purple, 2);
    @include generateLabelStyles(blue, 3);
    @include generateLabelStyles(orange, 4);
    @include generateLabelStyles(light-blue, 5);

    @include generateStatusLabelStyles(info);
    @include generateStatusLabelStyles(success);
    @include generateStatusLabelStyles(warning);
    @include generateStatusLabelStyles(danger);

    & > .badge {
      margin: 0 (-1 * variables.$clr_baselineRem_0_375) 0 variables.$clr_baselineRem_0_25;
      //-0.375 is -9px. 12px initial label padding plus a negative margin of 9
    }
  }

  @include mixins.fixForFirefox() {
    .label,
    a.label {
      // properly aligns labels in firefox...
      vertical-align: bottom;
    }
  }
}
