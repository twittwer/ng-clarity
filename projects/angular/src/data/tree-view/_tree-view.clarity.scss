/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

@use 'sass:meta';
@use '../../utils/mixins';
@use '../../utils/variables/variables.global';
@use 'variables.tree-view' as tree-view-variables;
@include meta.load-css('properties.tree-view');

@include mixins.exports('tree-view.clarity') {
  .clr-tree-node {
    //Display
    display: block;
  }

  .clr-tree-node-content-container {
    //Display
    display: flex;
    align-items: center;

    @include mixins.css-var(
      font-size,
      clr-tree-node-font-size,
      tree-view-variables.$clr-tree-node-font-size,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      font-weight,
      clr-tree-node-font-weight,
      tree-view-variables.$clr-tree-node-font-weight,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      line-height,
      clr-tree-node-line-height,
      tree-view-variables.$clr-tree-node-line-height,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      letter-spacing,
      clr-tree-node-letter-spacing,
      tree-view-variables.$clr-tree-node-letter-spacing,
      variables.$clr-use-custom-properties
    );

    &:hover {
      background-color: red; // todo
    }
  }

  .clr-treenode-content {
    //Note to people reviewing: Adding display flex to the content area. You think this might break a few things
    //on the consumer side?
    //Display
    flex: 1 1 auto;
    display: flex;
    align-items: center;

    @include mixins.css-var(
      padding,
      clr-treenode-content-padding,
      tree-view-variables.$clr-tree-node-font-size,
      variables.$clr-use-custom-properties
    );

    //Dimensions
    &:first-child {
      @include mixins.css-var(
        padding-left,
        clr-tree-node-content-padding-left,
        tree-view-variables.$clr-tree-node-touch-target,
        variables.$clr-use-custom-properties
      );
    }

    //Others
    border-radius: 0;
    @include mixins.css-var(
      border-top-left-radius,
      clr-tree-border-radius,
      tree-view-variables.$clr-tree-border-radius,
      variables.$clr-use-custom-properties
    );
    @include mixins.css-var(
      border-bottom-left-radius,
      clr-tree-border-radius,
      tree-view-variables.$clr-tree-border-radius,
      variables.$clr-use-custom-properties
    );

    @include mixins.css-var(
      line-height,
      clr-tree-node-touch-target,
      tree-view-variables.$clr-tree-node-touch-target,
      variables.$clr-use-custom-properties
    );

    cds-icon,
    clr-icon {
      @include mixins.equilateral(tree-view-variables.$clr-tree-caret-size);
      margin-right: tree-view-variables.$clr-tree-node-content-icon-margin-right; // todo
      vertical-align: middle;
    }
  }

  .clr-treenode-caret {
    //Display
    flex: 0 0 32px; //tree-view-variables.$clr-tree-node-touch-target;

    //Dimensions
    margin: 0;
    //@include mixins.equilateral(tree-view-variables.$clr-tree-node-touch-target); // todo: 16px
    width: 32px;
    height: 32px;
    padding: 8px; // 0px

    //Others
    background: none;
    border: none;
    @include mixins.css-var(
      color,
      clr-tree-node-caret-color,
      tree-view-variables.$clr-tree-node-caret-color,
      variables.$clr-use-custom-properties
    );

    cursor: pointer;
    outline-offset: -1 * variables.$clr_baselineRem_5px; //TODO: Replace with the outline offset mixin after the rem value change.

    &:hover {
      @include mixins.css-var(
        color,
        clr-tree-node-caret-link-hover-color,
        tree-view-variables.$clr-tree-node-caret-link-hover-color,
        variables.$clr-use-custom-properties
      );
    }
    &:active {
      @include mixins.css-var(
        color,
        clr-tree-node-caret-link-active-color,
        tree-view-variables.$clr-tree-node-caret-link-active-color,
        variables.$clr-use-custom-properties
      );
    }
    &:disabled {
      @include mixins.css-var(
        color,
        clr-tree-node-caret-link-disabled-color,
        tree-view-variables.$clr-tree-node-caret-link-disabled-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-tree-node-caret-icon {
    //Dimensions
    @include mixins.equilateral(tree-view-variables.$clr-tree-caret-size);

    //Others
    vertical-align: middle;
  }

  .clr-treenode-spinner-container {
    //Dimensions
    @include mixins.equilateral(tree-view-variables.$clr-tree-node-touch-target);
    padding: (tree-view-variables.$clr-tree-node-touch-target - tree-view-variables.$clr-tree-spinner-size) * 0.5;
  }

  .clr-treenode-spinner {
    //Dimensions
    @include mixins.min-equilateral(tree-view-variables.$clr-tree-spinner-size);
  }

  .clr-treenode-children {
    //Dimensions TODO!!!!!
    // @include mixins.css-var(
    //   margin-left,
    //   32px,
    //   tree-view-variables.$clr-tree-node-children-margin,
    //   variables.$clr-use-custom-properties
    // );
    margin-left: 32px;
    will-change: height;
    overflow-y: hidden;
  }

  .clr-treenode-link {
    //Display
    display: inline-block;

    //Dimensions
    @include mixins.equilateral(100%);
    margin: 0;
    padding: 0;
    padding-left: tree-view-variables.$clr-tree-node-link-padding-left;

    //Others
    background: transparent;
    border: 0;
    @include mixins.css-var(
      color,
      clr-tree-link-text-color,
      tree-view-variables.$clr-tree-link-text-color,
      variables.$clr-use-custom-properties
    );
    cursor: pointer;
    line-height: inherit;
    text-align: left;

    //States
    &:link,
    &:visited,
    &:active,
    &:hover {
      color: inherit;
    }

    &:hover,
    &:focus {
      @include mixins.css-var(
        background,
        clr-tree-link-hover-color,
        tree-view-variables.$clr-tree-link-hover-color,
        variables.$clr-use-custom-properties
      );
      text-decoration: none;
    }

    &.active {
      @include mixins.css-var(
        background,
        clr-tree-link-selection-color,
        tree-view-variables.$clr-tree-link-selection-color,
        variables.$clr-use-custom-properties
      );
      @include mixins.css-var(
        color,
        clr-tree-node-caret-link-hover-color,
        tree-view-variables.$clr-tree-node-caret-link-hover-color,
        variables.$clr-use-custom-properties
      );
    }
  }

  .clr-tree-node-content-container > .clr-checkbox-wrapper {
    //Dimensions
    // padding-top: tree-view-variables.$clr-tree-checkbox-padding-top;
    // padding-left: tree-view-variables.$clr-tree-checkbox-padding-left;
    // todo: overri
    line-height: 16px; // todo css-var
    &:first-child {
      margin-left: tree-view-variables.$clr-tree-node-touch-target; // TODO!!!!
    }
  }
}
